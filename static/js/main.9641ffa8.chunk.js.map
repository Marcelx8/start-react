{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["PokemonRow","pokemon","onSelect","id","name","english","type","join","Button","variant","onClick","PokemonInfo","base","Object","keys","map","key","Title","styled","h1","TwoColumnLayout","div","Container","Input","input","App","props","state","filter","selectedItem","fetch","then","resp","json","setState","value","this","onChange","evt","target","width","toLowerCase","includes","slice","React","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","CssBaseline","document","getElementById"],"mappings":"8SAOMA,EAAa,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAASC,EAAZ,EAAYA,SAAZ,OACjB,+BACE,6BAAKD,EAAQE,KACb,6BAAKF,EAAQG,KAAKC,UAClB,6BAAKJ,EAAQK,KAAKC,KAAK,QACvB,6BACE,cAACC,EAAA,EAAD,CAAQC,QAAQ,YAAYC,QAAS,kBAAMR,EAASD,IAApD,0BAiBAU,EAAc,SAAC,GAAD,IAAGP,EAAH,EAAGA,KAAMQ,EAAT,EAASA,KAAT,OAClB,gCACE,6BAAKR,EAAKC,UACV,gCACE,gCACGQ,OAAOC,KAAKF,GAAMG,KAAI,SAACC,GAAD,OACrB,+BACE,6BAAKA,IACL,6BAAKJ,EAAKI,OAFHA,cAwBbC,EAAQC,IAAOC,GAAV,mDAILC,EAAkBF,IAAOG,IAAV,2GAMfC,EAAYJ,IAAOG,IAAV,oFAMTE,EAAQL,IAAOM,MAAV,uFA4EIC,E,kDArEb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXC,OAAQ,GACR3B,QAAS,GACT4B,aAAc,MALC,E,qDASnB,WAAqB,IAAD,OAClBC,MAAM,uDACHC,MAAK,SAACC,GAAD,OAAUA,EAAKC,UACpBF,MAAK,SAAC9B,GAAD,OACJ,EAAKiC,SAAL,2BACK,EAAKP,OADV,IAEE1B,kB,oBAKR,WAAU,IAAD,OACP,OACE,eAACqB,EAAD,WACE,cAACL,EAAD,6BAEA,eAACG,EAAD,WACE,gCACE,cAACG,EAAD,CACEY,MAAOC,KAAKT,MAAMC,OAClBS,SAAU,SAACC,GAAD,OACR,EAAKJ,SAAL,2BACK,EAAKP,OADV,IAEEC,OAAQU,EAAIC,OAAOJ,YAIzB,wBAAOK,MAAM,OAAb,UACE,gCACE,+BACE,sCACA,2CAGJ,gCACGJ,KAAKT,MAAM1B,QACT2B,QAAO,SAAC3B,GAAD,OAAaA,EAAQG,KAAKC,QAAQoC,cAAcC,SAAS,EAAKf,MAAMC,OAAOa,kBAClFE,MAAM,EAAG,IACT5B,KAAI,SAACd,GAAD,OACH,cAAC,EAAD,CACEA,QAASA,EAETC,SAAU,SAACD,GAAD,OACR,EAAKiC,SAAL,2BACK,EAAKP,OADV,IAEEE,aAAc5B,OAJbA,EAAQE,eAYxBiC,KAAKT,MAAME,cAAgB,cAAC,EAAD,eAAiBO,KAAKT,MAAME,yB,GA/DhDe,IAAMC,WCtETC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBjB,MAAK,YAAkD,IAA/CkB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCAdO,IAASC,OACP,eAAC,IAAMC,WAAP,WACE,cAACC,EAAA,EAAD,IACA,cAAC,EAAD,OAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.9641ffa8.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport styled from '@emotion/styled';\nimport Button from '@mui/material/Button';\n\nimport './App.css';\n\nconst PokemonRow = ({ pokemon, onSelect }) => (\n  <tr>\n    <td>{pokemon.id}</td>\n    <td>{pokemon.name.english}</td>\n    <td>{pokemon.type.join(', ')}</td>\n    <td>\n      <Button variant=\"contained\" onClick={() => onSelect(pokemon)}>\n        Select\n      </Button>\n    </td>\n  </tr>\n);\n\nPokemonRow.propTypes = {\n  pokemon: PropTypes.shape({\n    name: PropTypes.shape({\n      english: PropTypes.string.isRequired,\n    }),\n    type: PropTypes.arrayOf(PropTypes.string.isRequired),\n  }),\n  onSelect: PropTypes.func.isRequired,\n};\n\nconst PokemonInfo = ({ name, base }) => (\n  <div>\n    <h1>{name.english}</h1>\n    <table>\n      <tbody>\n        {Object.keys(base).map((key) => (\n          <tr key={key}>\n            <td>{key}</td>\n            <td>{base[key]}</td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  </div>\n);\n\nPokemonInfo.propTypes = {\n  name: PropTypes.shape({\n    english: PropTypes.string.isRequired,\n  }),\n  base: PropTypes.shape({\n    HP: PropTypes.number.isRequired,\n    Attack: PropTypes.number.isRequired,\n    Defense: PropTypes.number.isRequired,\n    'Sp. Attack': PropTypes.number.isRequired,\n    'Sp. Defense': PropTypes.number.isRequired,\n    Speed: PropTypes.number.isRequired,\n  }),\n};\n\nconst Title = styled.h1`\n  text-align: center;\n`;\n\nconst TwoColumnLayout = styled.div`\n  display: grid;\n  grid-template-columns: 70% 30%;\n  grid-column-gap: 1rem;\n`;\n\nconst Container = styled.div`\n  margin: auto;\n  width: 800px;\n  padding-top: 1rem;\n`;\n\nconst Input = styled.input`\n  width: 100%;\n  font-size: x-large;\n  padding: 0.2rem;\n`;\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      filter: '',\n      pokemon: [],\n      selectedItem: null,\n    };\n  }\n\n  componentDidMount() {\n    fetch('https://marcelx8.github.io/start-react/pokemon.json')\n      .then((resp) => resp.json())\n      .then((pokemon) =>\n        this.setState({\n          ...this.state,\n          pokemon,\n        })\n      );\n  }\n\n  render() {\n    return (\n      <Container>\n        <Title>Pokemon Search</Title>\n\n        <TwoColumnLayout>\n          <div>\n            <Input\n              value={this.state.filter}\n              onChange={(evt) =>\n                this.setState({\n                  ...this.state,\n                  filter: evt.target.value,\n                })\n              }\n            />\n            <table width=\"100%\">\n              <thead>\n                <tr>\n                  <th>Name</th>\n                  <th>Type</th>\n                </tr>\n              </thead>\n              <tbody>\n                {this.state.pokemon\n                  .filter((pokemon) => pokemon.name.english.toLowerCase().includes(this.state.filter.toLowerCase()))\n                  .slice(0, 20)\n                  .map((pokemon) => (\n                    <PokemonRow\n                      pokemon={pokemon}\n                      key={pokemon.id}\n                      onSelect={(pokemon) =>\n                        this.setState({\n                          ...this.state,\n                          selectedItem: pokemon,\n                        })\n                      }\n                    />\n                  ))}\n              </tbody>\n            </table>\n          </div>\n          {this.state.selectedItem && <PokemonInfo {...this.state.selectedItem} />}\n        </TwoColumnLayout>\n      </Container>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport CssBaseline from '@mui/material/CssBaseline';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <CssBaseline />\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}